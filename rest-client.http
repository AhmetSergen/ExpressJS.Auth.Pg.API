# List of quick example requests for all controllers in this project.

# "REST Client" VS Code extension can be used to send requests on .http files
# Click "Send Request" button to send request to highlighted URL
# If "Send Request" button does not appear on top of request URLs; 
# highlight desired request line and press f1 -> select "Rest Client: Send Request"

<!-- # Request Structure:

<Http Protocol> <Url>
<Request Header>

<Request Body as JSON>
-->

### [POST] Register
# Send registration info as json in request body
# Returns AccessToken and RefreshToken
# Sends Corfirmation Mail to user mail address with user's email_token
POST http://localhost:3000/api/auth/register
content-type: application/json

{
    "email": "test1@testmail.com",
    "password": "testpassword"
}

### [POST] Login
# Send login info as json in body
# Returns AccessToken and RefreshToken
POST http://localhost:3000/api/auth/login
content-type: application/json

{
    "email": "test1@testmail.com",
    "password": "testpassword"
}

### [POST] Generate Access Token
# Generate new access token using the refresh token in body
# Returns AccessToken
POST http://localhost:3000/api/auth/generateAccessToken
content-type: application/json

{
    "refreshToken": "<refresh_token>"
}

### [GET] Check Access Token
# Check if token is verified via veriftToken middleware that reads accessToken from "Authorization" request header 
# Use AccessToken created from generateAccessToken controller for Bearer token
GET http://localhost:3000/api/auth/checkAccessToken
content-type: application/json
Authorization: Bearer <access_token>

### [POST] Confirm Email Token
# Get email token from confirmation mail 
# Use Bearer <access_token> in request headers
# Use <emailToken> in request parameters
# Email example: "Click the link to confirm your email: http://localhost:9000/confirm-email/<emailToken>"
POST http://localhost:3000/api/auth/confirmEmailToken
content-type: application/json
Authorization: Bearer <access_token>

{
    "emailToken": "<email_token>"
}

### [POST] Reset Password 
# Sends password reset mail with user's passwordResetToken
# Since user requests password reset, not logged in, does not require Authorization token (AccessToken)
POST http://localhost:3000/api/auth/resetPassword
content-type: application/json

{
    "email": "test1@testmail.com",
    "provisionalPassword": "newtestpassword"
}

### [POST] Reset Password Confirm
# Click the link to confirm your password reset: http://localhost:9000/confirm-password/<passwordResetToken>
POST http://localhost:3000/api/auth/resetPasswordConfirm
content-type: application/json

{
    "email": "test1@testmail.com",
    "passwordResetToken": "password_reset_token"
}

### [POST] Change Email 
POST http://localhost:3000/api/auth/changeEmail
content-type: application/json
Authorization: Bearer <access_token>

{
    "provisionalEmail": "newtest1@testmail.com"
}

### [POST] Change Email Confirm 
# Click the link to confirm your new email change: http://localhost:9000/confirm-email-change/<changeEmailToken>
POST http://localhost:3000/api/auth/changeEmailConfirm
content-type: application/json
Authorization: Bearer <access_token>

{
    "changeEmailToken": "<change_email_token>"
}


### Test Token Routes

# [POST] Generate Test Token
POST http://localhost:3001/api/test/generateTestToken

### [GET] Check Test Token (without token)
# Try without token, will get error:
GET http://localhost:3001/api/test/checkTestToken

### [GET] Check Test Toke (with token)
# Send req with token in headers (get token with generateToken controller)
GET http://localhost:3001/api/test/checkTestToken
Authorization: Bearer <access_token>
